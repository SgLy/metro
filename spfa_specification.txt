对于这次的寻路算法，应该考虑以下部分：
1、对于多元的优先级比较，对于不同因素优先级的自定义的最短路算法。
2、对于寻路结果，进行路径包装反馈。
	对于第一点，我们这里采用了最短路算法，最坏理论复杂度为O(nm)，其中n为图中的点数，m为图中的边数，但通过对该算法的深入分析，可以发现在网线图中，spfa算法的表现会极其优秀，比大多数算法表现的都要好。
	考虑到实现的复杂性，显然如果对每一种优先级实现一种最短路算法是很麻烦的，分析后可以发现，决定最短路算法结果的在于对于状态中偏序的定义，所以我们可以使用函数对象来实现比较函数。
	对于最短路算法中每个点的状态，我们可以是用
/**<<<<<<<<<<<<<<<<<<<<<<<<<<
插入State定义代码
>>>>>>>>>>>>>>>>>>>>>>>>>>>**/
来表示，由于广州地铁没有两条地铁线会连续相交两个点，所以使用两个连续的站点可以确定地铁的线路。
	在实现最短路算法的过程中，应该注意统计费用的部分，由于广州地铁使用里程分段计费的方式，所以应该对路程进行统计，特别地，要注意APM线的单独计费，因为APM线是不是用里程计费的。再结合实际情况，广州地铁线网与APM实际上是分开运营的，所以人们需要先出广州地铁，然后进入APM线，然后再进入广州地铁。这里的一进一出的里程是不能累加的，因为广州地铁采用的是不足上取整的计费方式，即若实际6公里，则按照8公里计费，所以需要分段统计。故需要两个变量记录当前的里程数。
	对于第二点，我们要注意包装路径时线路相交的问题。对于换成站，对于分开路线表示时，要注意其实际上属于两条线路，故需要合理表示。回溯路径主要需要pre_station的作用，每次沿着pre_station往回走，一直走到终点，边走需要边判断线路的编号，查看是否进入了新的线路，然后将结果包装反馈。
